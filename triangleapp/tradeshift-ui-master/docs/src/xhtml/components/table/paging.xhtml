<!DOCTYPE html>
<html>
	<head>
		<title>Table Paging</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<article>
			<h1>Paging the rows</h1>
			<section>
				<p>
					You can limit the number of visible rows with the
					<code>max</code> method. If the table contains more rows, a Pager will be created. An
					equivalent method <code>size</code> also fixes the height of the Table so that the pager
					(footer) never jump up and down.
				</p>
				<ul class="splitscreen">
					<li>
						<figure data-ts="DoxScript" class="attention">
							<script type="runnable">
								$.getJSON('assets/rowdata.json', function(json) {
									ts.ui.get('#example9', table => {
										table.cols([
											{ label: 'ID', type: 'ts-number' },
											{ label: 'Name', flex: 2 },
											{ label: 'Price', type: 'ts-number'}
										]);
										table.rows(json).max(5);
									});
								});
							</script>
						</figure>
					</li>
					<li>
						<div data-ts="Table" id="example9"></div>
					</li>
				</ul>
				<p>
					You can track the page with the <code>onpage</code> method, if for some reason you need
					that.
				</p>
				<figure data-ts="DoxScript">
					<script>
						table.onpage = function(index) {
							console.log(index); // called whenever the user changes page
						};
					</script>
				</figure>
				<p>
					You can set the <code>max</code> and <code>total</code> method to show pager status in the
					footer.
				</p>
				<ul class="splitscreen">
					<li>
						<figure data-ts="DoxScript">
							<script type="runnable">
								$.getJSON('assets/rowdata.json', function(json) {
									ts.ui.get('#example10', table => {
										table.cols([
											{ label: 'ID', type: 'ts-number' },
											{ label: 'Name', flex: 2 },
											{ label: 'Price', type: 'ts-number'}
										]);
										table.rows(json).max(5).total(json.length);
									});
								});
							</script>
						</figure>
					</li>
					<li>
						<div data-ts="Table" id="example10"></div>
					</li>
				</ul>
				<p>
					If you would like to manage paging yourself, because you have a billion products and don't
					want to fetch them all at once, you can create your own pager.
				</p>
				<ul class="splitscreen">
					<li>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var popup = ts.ui.Notification;
								ts.ui.get('#big-data-table', table => {
									table.max(10).cols([
										{ label: 'ID', type: 'ts-number' },
										{ label: 'Name', flex: 2 },
										{ label: 'Price', type: 'ts-number'}
									]);
									table.pager({
										pages: 5,
										page: 0,
										onselect: loadpage
									});
									function loadpage(index) {
										var url = 'assets/page-' + index + '.json';
										$.getJSON(url, function(json) {
											var n = json.length;
											popup.success('Loaded ' + n + ' rows');
											table.rows(json);
										});
									}
									loadpage(0);
								});
							</script>
						</figure>
					</li>
					<li>
						<div data-ts="Table" id="big-data-table"></div>
					</li>
				</ul>
				<p>
					If you need to update the index later on, for example to support history navigation, it is
					recommended that you change the
					<code>page</code> property of the existing Pager instead of initializing a whole new
					Pager. You can just call the same method without arguments.
				</p>
				<figure data-ts="DoxScript">
					<script type="text/plain">
						mytable.pager().page = 23;
					</script>
				</figure>
				<p>
					If you would like to manage paging by yourself and show page status, you need to set
					<code>total</code> and <code>number</code>, which are the total of items in the table and
					the number of items of a page.
				</p>
				<ul class="splitscreen">
					<li>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var popup = ts.ui.Notification;
								ts.ui.get('#page-status-table', table => {
									table.max(10).cols([
										{ label: 'ID', type: 'ts-number' },
										{ label: 'Name', flex: 2 },
										{ label: 'Price', type: 'ts-number'}
									]);
									table.pager({
										pages: 5,
										page: 0,
										number: 10,
										total: 50,
										onselect: loadpage
									});
									function loadpage(index) {
										var url = 'assets/page-' + index + '.json';
										$.getJSON(url, function(json) {
											var n = json.length;
											popup.success('Loaded ' + n + ' rows');
											table.rows(json);
										});
									}
									loadpage(0);
								});
							</script>
						</figure>
					</li>
					<li>
						<div data-ts="Table" id="page-status-table"></div>
					</li>
				</ul>
			</section>
		</article>
	</body>
</html>
