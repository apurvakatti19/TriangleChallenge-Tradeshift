<!DOCTYPE html>
<html>
	<head>
		<title>Usage</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body>
		<article>
			<h1>Basic usage</h1>
			<section class="desc">
				<p>
					You will use any combination of HTML attributes, CSS classnames and JavaScript interfaces
					to deal with the different components.
				</p>
			</section>
			<section>
				<p>
					Most components are used simply by adding the
					<code class="attr-name">data-ts</code> attribute to elements. The framework will recognize
					this attribute and add behavior and styling.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<aside data-ts="Aside"> ... </aside>
					</script>
				</figure>

				<h3>Config attributes</h3>
				<p>
					Additional attributes may be used to configure the component. By convention, these will be
					prefixed with
					<code class="attr-name">data-ts.</code> (including the dot). The
					<code class="attr-name">data-ts.open</code> attribute would for example open the aside.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<aside data-ts="Aside" data-ts.open="true"> ... </aside>
					</script>
				</figure>

				<h3>JS interface</h3>
				<p>
					The component may also expose a JavaScript API. You can get hold of the implementation
					using <code>ts.ui.get</code>, which takes an element or a CSS selector as argument. If you
					use a selector, the query will be scoped from the document root.
				</p>
				<figure data-ts="DoxScript">
					<script>
						var element = document.querySelector('#myaside');
						ts.ui.get(element, component => {
							component.open();
						});
					</script>
				</figure>

				<h3>API-only components</h3>
				<p>
					Components that embody more complex behavior will usually be dealt with through a pure
					JavaScript API, so without writing markup. This will come in handy when we decide to
					change the complex behavior at a later stage.
				</p>
				<figure data-ts="DoxScript">
					<script>
						ts.ui
							.DatePicker({
								title: 'Your Birthday',
								value: '1973-03-26'
							})
							.open();
					</script>
				</figure>
				<p>
					When making apps with UI components, thereâ€™s a few
					<a data-ts="Button" href="/#getstarted/rules.html">basic rules</a> we would like you to
					observe.
				</p>
			</section>
		</article>
	</body>
</html>
