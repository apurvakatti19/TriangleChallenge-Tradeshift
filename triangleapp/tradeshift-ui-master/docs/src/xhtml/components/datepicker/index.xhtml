<!DOCTYPE html>
<html>
	<head>
		<title>DatePicker</title>
	</head>
	<body>
		<article>
			<h1>DatePicker</h1>
			<section class="desc">
				<p>
					Calendar widget that appears in Aside. Used in Forms for an implementation of &lt;input
					type="date"&gt; elements.
				</p>
			</section>
			<section>
				<p>
					The DatePicker can be launched with a JavaScript API. You should implement the
					<code>onselect</code> method to get notified whenever the user picks a date. Note that you
					must manually <code>open</code> and <code>close</code> the DatePicker.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						var datePicker = ts.ui.DatePicker({
							title: "Your Birthday",
							value: '1973-03-26',
							onselect: function(newval, oldval) {
								ts.ui.Notification.success(this.value);
								this.close();
							},
							onclosed: function() {
								this.dispose();
							}
						});
						datePicker.open();
					</script>
				</figure>
				<p>You can specify a <code>min</code> and <code>max</code> value.</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.DatePicker({
							title: "Your Birthday",
							value: '1984-05-23',
							min: '1984-01-01',
							max: '1985-12-24',
							onselect: function() {
								this.close();
							},
							onclosed: function() {
								this.dispose();
							}
						}).open();
					</script>
				</figure>
				<p>
					You can also use the <code>onrendercell</code> callback to manually adjust which cells are
					selectable, as well add in additional classes per cell for styling purposes.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.DatePicker({
							title: "Manually Set Clickable Dates",
							value: '1984-05-23',
							min: '1984-01-01',
							max: '1985-12-24',
							onrendercell: function(cell){
								var jsDate = new Date(cell.year, cell.month, cell.day);
								var isWeekday = ![0,6].includes(jsDate.getDay());

									cell.selectable = isWeekday;
									cell.className = (isWeekday ? 'weekday' : 'weekend');
								},
								onselect: function() {
									ts.ui.Notification.success(this.value);
									this.close();
								},
								onclosed: function() {
									this.dispose();
								}
							}).open();
					</script>
				</figure>
				<p>Here is an example DatePicker where a value is NOT set ahead of time.</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.DatePicker({
							title: "Date Range with no starting value",
							value: null,
							min: '2019-01-01',
							max: '2019-03-31',
							onselect: function() {
								ts.ui.Notification.success(this.value);
								this.close();
							},
							onclosed: function() {
								this.dispose();
							}
						}).open();
					</script>
				</figure>
				<p>You can set and change a note for the datepicker.</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.DatePicker({
							title: 'The note is under the header',
							value: '2019-01-01',
							note: 'Have a nice day',
							onselect: function() {
								this.close();
							},
							onclosed: function() {
								this.dispose();
							}
						}).open();
					</script>
				</figure>
				<p>You can also make a deselect datepicker.</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.DatePicker({
							title: 'Deselect the date',
							value: '2019-01-01',
							deselectable: true,
							onselect: function() {
								ts.ui.Notification.success('You deselected the date');
								this.close();
							},
							onclosed: function() {
								this.dispose();
							}
						}).open();
					</script>
				</figure>
				<p>
					The object argument configures a <code>ts.ui.DatePickerModel</code> as outlined below.
				</p>
				<div data-ts="DoxApi">
					<script type="application.json">
						{
							"name": "ts.ui.DatePickerModel",
							"properties": [
								{
									"name": "title",
									"type": "string",
									"desc": "Appears as the title of the DatePicker"
								},
								{
									"name": "value",
									"type": "string",
									"desc": "The selected date. Must be dash-separated, ISO 8601 formatted date string e.g. 2015-01-01"
								},
								{
									"name": "note",
									"type": "string",
									"desc": "The note of the datepicker to show some information"
								},
								{
									"name": "deselectable",
									"type": "boolean",
									"desc": "The datapicker is deselectable?"
								},
								{
									"name": "open",
									"type": "void",
									"desc": "Open the DatePicker"
								},
								{
									"name": "close",
									"type": "void",
									"desc": "Close the DatePicker"
								},
								{
									"name": "onrendercell",
									"type": "void",
									"desc": " Called whenever the datepicker renders a cell, used to determine if a cell is selectable through the `cell.selectable` property. Can also be an injection point for adding in specialized classes for the current cell with `cell.className`"
								},
								{
									"name": "onselect",
									"type": "void",
									"desc": "Called whenever selection changes with two arguments `newval` and `oldval`"
								},
								{
									"name": "onclosed",
									"type": "void",
									"desc": "Event listener for close event. Called after aside closing animation is completed."
								},
								{
									"name": "dispose",
									"type": "void",
									"desc": "Cleanup the DataPicker (recommended)"
								}
							]
						}
					</script>
				</div>
			</section>
		</article>
	</body>
</html>
