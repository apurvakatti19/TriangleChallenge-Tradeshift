<!DOCTYPE html>
<html>
	<head>
		<title>Button</title>
		<object data="tabs.xhtml"></object>
		<script>
			function spin(selector) {
				$(selector).attr('data-ts.busy', true);
				setTimeout(function() {
					$(selector).attr('data-ts.busy', false);
				}, 3000);
			}
		</script>
	</head>
	<body>
		<article>
			<h1>Button</h1>
			<section class="desc">
				<p>
					Use button classnames to prioritize the possible actions in your app.
				</p>
			</section>
			<section>
				<p>
					Assign <att>data-ts="Button"</att> to a <code class="el">button</code> or an
					<code class="el">a</code> to initialize it as a Button.
				</p>
				<figure data-ts="DoxMarkup">
					<output />
					<script type="text/html">
						<button data-ts="Button">
							<span>Default Button</span>
						</button>
					</script>
				</figure>
				<p>
					The default button looks like a link, but some CSS classnames can be added to make it look
					more like a button.
				</p>
				<figure data-ts="DoxMarkup">
					<output />
					<script type="text/html">
						<button data-ts="Button" class="ts-primary">
							<span>Primary</span>
						</button>
						<button data-ts="Button" class="ts-secondary">
							<span>Secondary</span>
						</button>
						<button data-ts="Button" class="ts-tertiary">
							<span>Tertiary</span>
						</button>
					</script>
				</figure>

				<h3>Button icons</h3>
				<p>
					Icons go into a separate <code class="el">i</code> element. You can see a
					<a data-ts="Button" href="/#components/icons/css.html">list of all icons</a>.
				</p>
				<figure data-ts="DoxMarkup">
					<output />
					<script type="text/html">
						<button data-ts="Button" class="ts-primary">
							<span style="display:none;">Button Text</span>
							<i class="ts-icon-arrowright" ></i>
						</button>
					</script>
				</figure>
				<p>
					You'll notice in the code snippet that the
					<code class="el">span</code> has been set to <code>display:none</code>.
				</p>
				<div data-ts="Note">
					<i class="ts-icon-info"></i>
					<p>Buttons should never show <strong>both</strong> text and icon at the same time.</p>
				</div>
				<p>
					If you need both, it's up to you to hide one or the other. In this example, the button has
					been rigged up to show the icon only in the mobile breakpoint.
				</p>
				<figure data-ts="DoxMarkup">
					<output />
					<script type="text/html">
						<button data-ts="Button" class="ts-primary">
							<span class="ts-hide-mobile-only">Hidden In Mobile</span>
							<i class="ts-show-mobile-only ts-icon-arrowright" ></i>
						</button>
					</script>
				</figure>

				<h3>Button spinner</h3>
				<p>
					Assign the <code class="attr-name">data-ts.busy</code> attribute to a
					<code class="el">button</code> to initialize a spinner.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<button data-ts="Button" data-ts.busy="true" class="ts-primary">
							<span>Primary</span>
						</button>
					</script>
				</figure>
				<p>
					<button data-ts="Button" class="ts-primary" id="mybutton" onclick="spin('#mybutton')">
						<span>show spinner</span>
					</button>
				</p>

				<h3>Micro Button</h3>
				<p>You can add class <code class="attr-name">ts-micro</code> to get a micro button.</p>
				<figure data-ts="DoxMarkup">
					<output />
					<script type="text/html">
						<button data-ts="Button" class="ts-primary ts-micro">
							<span>Primary</span>
						</button>
						<button data-ts="Button" class="ts-secondary ts-micro">
							<span>Secondary</span>
						</button>
						<button data-ts="Button" class="ts-tertiary ts-micro">
							<span>Tertiary</span>
						</button>
					</script>
				</figure>
			</section>
			<section>
				<p>
					You can
					<a data-ts="Button" href="/#components/buttons/buttons.html">group buttons in menus</a>
					to unlock advanced layout options.
				</p>
			</section>
		</article>
	</body>
</html>
