!(function(e) { 'use strict'; e.edb = gui.namespace('edb', (function(e) { return {version: '-1.0.0', debug: !1, $accessaware: !1, BROADCAST_ACCESS: 'edb-broadcast-access', BROADCAST_CHANGE: 'edb-broadcast-change', BROADCAST_OUTPUT: 'edb-broadcast-output', BROADCAST_SCRIPT_INVOKE: 'edb-broadcast-script-invoke', TICK_SCRIPT_UPDATE: 'edb-tick-script-update', TICK_COLLECT_INPUT: 'edb-tick-collect-input', TICK_PUBLISH_CHANGES: 'edb-tick-update-changes', get: function() { console.error('Deprecated API is deprecated: edb.get()'); }}; }(gui.Arguments.confirmed))), edb.Type = (function(e) { return gui.Class.create(null, {onconstruct: function() {}, ondestruct: function() {}, output: e(function() { edb.Output.$output(this); }), outputGlobal: e(function() { console.error('Not supported just yet: ' + this + '.outputGlobal()'); }), revoke: e(function() { edb.Output.$revoke(this); }), dispose: e(function() { edb.Type.$destruct(this); }), serializeToString: function(e, t) { return (new edb.Serializer()).serializeToString(this, e, t); }, $originalid: null, $destructed: !1, $onconstruct: function() {}, $ondestruct: function() { this.constructor.storage && this.persist(); }}); }(gui.Combo.chained)), edb.Type.mixin(null, null, {is: function(e) { return edb.Object.is(e) || edb.Array.is(e); }, isConstructor: function(e) { return gui.Type.isGuiClass(e) && gui.Class.ancestorsAndSelf(e).some(function(e) { return e === edb.Object || e === edb.Array; }); }, lookup: function(e, t) { var n = null; switch (gui.Type.of(t)) { case 'function':n = t; break; case 'string':n = gui.Object.lookup(t, e); break; case 'object':console.error(this + ': expected edb.Type constructor (not an object)'); } if (!n) throw new TypeError('The type "' + t + '" does not exist'); return n; }, cast: function(e) { if (gui.Type.isComplex(e) && !edb.Type.is(e)) switch (gui.Type.of(e)) { case 'object':return edb.Object.from(e); case 'array':return edb.Array.from(e); } return e; }, mixin: function(e, t, n) { return [edb.Object, edb.Array].forEach(function(r) { r.mixin(e, t, n); }), this; }, $observe: function(e, t) { var n = e.$instanceid, r = this._observers, i = r[n] || (r[n] = []); return i.indexOf(t) === -1 && i.push(t), e; }, $unobserve: function(e, t) { var n, r = e.$instanceid, i = this._observers, o = i[r]; return o && (n = o.indexOf(t)) > -1 && gui.Array.remove(o, n) === 0 && delete i[r], e; }, $destruct: function(e) { (new edb.Crawler()).crawl(e, {ontype: function(t) { t.$destructed || (e.ondestruct(), e.$ondestruct(), e.$destructed = !0, gui.unloading || gui.Garbage.$nukeallofit(e)); }}); }}), (function(e) { var t = {isOutput: function() { return edb.Output.$is(this); }, getOutput: function() { console.error('Deprecated API is deprecated: getOutput()'); }, revokeOutput: function() { console.error('Deprecated API is deprecated: revokeOutput()'); }}, n = {from: gui.Arguments.confirmed('(string|object|array|null)')(function(e) { var t = this; return e && (edb.Type.is(e) && (e = (new edb.Serializer()).serializeToString(e)), gui.Type.isString(e) && (e.includes('$object') || e.includes('$array')) && (e = (new edb.Parser()).parseFromString(e, null))), new t(e); }), extend: function() { var e = gui.Class.extend.apply(this, arguments); return e.output = new edb.Output(e), e; }}; [t, n].forEach(function(e) { gui.Object.each(e, function(e, t) { edb.Type[e] = t; }); }), edb.Type.$staticmixins = function() { var e = {}; return [t, n].forEach(function(t) { Object.keys(t).forEach(function(n) { e[n] = t[n]; }, this); }, this), e; }; }(gui.Arguments.confirmed)), edb.Object = (function(e, t) { return gui.Class.create(Object.prototype, {addObserver: e('object|function')(t(function(e) { edb.Object.observe(this, e); })), removeObserver: e('object|function')(t(function(e) { edb.Object.unobserve(this, e); })), $onconstruct: function(e) { switch (edb.Type.prototype.$onconstruct.apply(this, arguments), gui.Type.of(e)) { case 'object':case 'undefined':case 'null':var t = gui.Object.copy(e || {}), n = edb.ObjectPopulator.populate(t, this); edb.ObjectProxy.approximate(t, this, n); break; default:throw new TypeError('Unexpected edb.Object constructor argument of type ' + gui.Type.of(e) + ': ' + String(e)); } this.onconstruct(), this.oninit && console.error('Deprecated API is deprecated: ' + this + '.oninit'); }, toJSON: function() { return gui.Object.map(this, function(e, t) { var n = e.charAt(0); return n !== '$' && n !== '_' ? edb.Type.is(t) ? t.toJSON() : t : void 0; }); }}); }(gui.Arguments.confirmed, gui.Combo.chained)), edb.Object.mixin(null, edb.Type.$staticmixins(), {observe: edb.Type.$observe, unobserve: edb.Type.$unobserve, ontick: function(e) { var t, n, r, i = this._observers; e.type === edb.TICK_PUBLISH_CHANGES && (t = gui.Object.copy(this._changes), this._changes = Object.create(null), gui.Object.each(t, function(e, o) { (r = i[e]) && (n = [], gui.Object.each(t, function(t, r) { t === e && gui.Object.each(r, function(e, t) { n.push(t); }); }), r.forEach(function(e) { e.onchange(n); })); })); }, $onaccess: function(e, t) { edb.$accessaware && gui.Broadcast.dispatch(edb.BROADCAST_ACCESS, [e, t]); }, $onchange: function(e, t, n, r) { if (n !== r) { var i = edb.ObjectChange.TYPE_UPDATE, o = this._changes, c = e.$instanceid, u = o[c] = o[c] || (o[c] = Object.create(null)); u[t] = new edb.ObjectChange(e, t, i, n, r), gui.Tick.dispatch(edb.TICK_PUBLISH_CHANGES); } }, _observers: Object.create(null), _changes: Object.create(null)}), (function() { gui.Tick.add(edb.TICK_PUBLISH_CHANGES, edb.Object), gui.Object.extendmissing(edb.Object.prototype, edb.Type.prototype); }()), (function(e, t) { function n(e, t) { return edb.ArrayPopulator.convert(e, t); } function r(e, t, n, r) { edb.Array.$onchange(e, t, n, r); } function i(e) { var t = e.$instanceid; return edb.Array._observers[t] ? !0 : !1; }edb.Array = gui.Class.create(e, {push: function() { var t = this.length, o = n(this, arguments), c = e.push.apply(this, o); return i(this) && r(this, t, null, o), c; }, pop: function() { var t = this.length - 1, n = e.pop.apply(this); return i(this) && t >= 0 && r(this, t, [n], null), n; }, shift: function() { var t = e.shift.apply(this); return i(this) && r(this, 0, [t], null), t; }, unshift: function() { var t = n(this, arguments), o = e.unshift.apply(this, t); return i(this) && r(this, 0, null, t), o; }, splice: function() { var t = arguments, o = t[0], c = n(this, [].slice.call(t, 2)), u = [o, t[1]].concat(c), s = e.splice.apply(this, u); return i(this) && r(this, o, s, c), s; }, reverse: function() { if (i(this)) { var t = this.toJSON(), n = e.reverse.apply(t.slice()); r(this, 0, t, n); } return e.reverse.apply(this); }, onconstruct: function(e) {}, addObserver: t(function(e) { edb.Object.observe(this, e), edb.Array.observe(this, e); }), removeObserver: t(function(e) { edb.Object.unobserve(this, e), edb.Array.unobserve(this, e); }), $of: null, $onconstruct: function() { var e, t; edb.Type.prototype.$onconstruct.apply(this, arguments), arguments.length && (e = arguments[0] ? arguments[0].$object || {} : {}, t = edb.ObjectPopulator.populate(e, this), edb.ArrayPopulator.populate(this, arguments), edb.ObjectProxy.approximate(e, this, t)), this.onconstruct([].slice.call(this)); }, get: function(e) { return edb.$accessaware && edb.Array.$onaccess(this, e), this[e]; }, getLength: function(e) { return edb.$accessaware && edb.Array.$onaccess(this, e), this.length; }, setLength: function(e) { for (var t = []; this.length > e;)t.push(this.pop()); t.length && r(this, this.length - 1, t); }, toJSON: function() { return Array.map(this, function(e) { return edb.Type.is(e) ? e.toJSON() : e; }); }}); }(Array.prototype, gui.Combo.chained)), edb.Array.mixin(null, edb.Type.$staticmixins(), {observe: edb.Type.$observe, unobserve: edb.Type.$unobserve, isConstructor: function(e) { return gui.Type.isConstructor(e) && gui.Class.ancestorsAndSelf(e).indexOf(edb.Array) > -1; }, ontick: function(e) { var t, n, r = this._observers; e.type === edb.TICK_PUBLISH_CHANGES && (t = gui.Object.copy(this._changes), this._changes = Object.create(null), gui.Object.each(t, function(e, t) { (n = r[e]) && n.forEach(function(e) { e.onchange(t); }); })); }, _observers: Object.create(null), _changes: Object.create(null), $onaccess: function(e, t) { edb.$accessaware && gui.Broadcast.dispatch(edb.BROADCAST_ACCESS, [e]); }, $onchange: function(e, t, n, r) { var i = e.$instanceid, o = this._changes, c = o[i] || (o[i] = []); c.push(new edb.ArrayChange(e, t, n, r)), gui.Tick.dispatch(edb.TICK_PUBLISH_CHANGES); }}), (function(e) { function t(e, t) { t.forEach(function(t) { e[t] = n(e[t]); }); } var n = gui.Combo.before(function() { edb.$accessaware && edb.Array.$onaccess(this, -1); }); t(e, ['filter', 'forEach', 'every', 'map', 'some', 'indexOf', 'lastIndexOf', 'slice']); }(edb.Array.prototype)), (function() { gui.Tick.add(edb.TICK_PUBLISH_CHANGES, edb.Array), gui.Object.extendmissing(edb.Array.prototype, edb.Type.prototype); }()), edb.ObjectPopulator = (function(e, t, n, r) { function i(e) { var t = edb.Object.is(e) ? edb.Object : edb.Array, n = edb.Object.is(e) ? Object : Array, r = [], i = [edb.Type, t, n]; return gui.Object.all(e, function(e) { s(e) && i.every(function(t) { return void 0 === t.prototype[e]; }) && r.push(e); }), r; } function o(e, t) { var n = e.$originalid || e.$instanceid; delete e.$instanceid, delete e.$originalid, n && Object.defineProperty(t, '$originalid', gui.Property.nonenumerable({value: n})); } function c(e, t) { throw new TypeError(e + ' declares "' + t + '" as something undefined'); } function u(e, t) { throw new TypeError(e + ' "' + t + '" must resolve to a constructor'); } function s(e) { return e.match(/^[a-z]/i); } function a(e, t) { return e.hasOwnProperty(t) ? Object.getOwnPropertyDescriptor(e, t) : (e = Object.getPrototypeOf(e)) ? a(e, t) : null; } return {populate: function(d, p) { var h, f, b, l, y = Object.create(null), g = p.constructor.prototype, m = p.constructor.$classname, v = []; return o(d, p), i(p).forEach(function(i) { switch (f = p[i], b = d[i], f) { case Object:p[i] = {}, v.push(i); break; case Array:b && Array.isArray(b) ? p[i] = b.slice() : p[i] = [], v.push(i); break; default:e(b) ? e(f) ? t(f) && (n(f) ? (r(f) || (f = f(b)), r(f) ? b !== null && (h = f, y[i] = h.from(d[i])) : u(m, i)) : y[i] = edb.Type.cast(e(b) ? b : f)) : c(m, i) : s(i) && edb.Type.isConstructor(f) ? (edb.Array.isConstructor(f) ? d[i] = [] : d[i] = null, h = f, y[i] = h.from(d[i])) : (l = a(g, i)) && Object.defineProperty(d, i, l); } }), gui.Object.nonmethods(d).filter(function(e) { return v.indexOf(e) === -1; }).forEach(function(e) { var t = d[e]; s(e) && gui.Type.isComplex(t) && (y[e] || (y[e] = edb.Type.cast(t))); }), y; }}; }(gui.Type.isDefined, gui.Type.isComplex, gui.Type.isFunction, gui.Type.isConstructor)), edb.ArrayPopulator = (function() { function e(e) { return e.$of && e.$of.prototype.reverse; } function t(e) { return Array.isArray(e) || edb.Array.is(e); } function n(e, t) { if (!gui.debug || edb.Type.isConstructor(e)) { if (!edb.Type.is(t)) return new e(t); if (e.is(t)) return t; i(e, t); } else i('edb.Type', e); } function r(e, t) { var r = e(t); return gui.Type.isConstructor(r) ? r = n(r, t) : edb.Type.is(r) || r === null ? r = r : i('edb.Type constructor or instance', gui.Type.of(r), 'return null for nothing'), r; } function i(e, t, n) { throw new TypeError('$of expected ' + e + ', got ' + t + (n ? ' (' + n + ')' : '')); } function o(e, t) { return e.map(function(e) { return void 0 !== e && (e = gui.Type.isConstructor(t.$of) ? n(t.$of, e) : r(function(e) { return t.$of(e); }, e)), e; }); } function c(e) { return e.map(function(e) { if (!edb.Type.is(e)) switch (gui.Type.of(e)) { case 'object':return new edb.Object(e); case 'array':return new edb.Array(e); } return e; }); } return {populate: function(n, r) { var i = r[0]; i && (!e(n) && t(i) && (r = i), Array.prototype.push.apply(n, this.convert(n, r))); }, convert: function(e, t) { if (t = gui.Array.from(t), gui.Type.isNull(e.$of)) return c(t); if (gui.Type.isFunction(e.$of)) return o(t, e); var n = gui.Type.of(e.$of); throw new Error(e + ' cannot be $of ' + n); }}; }()), edb.ObjectProxy = (function() { function e(e, t) { return function() { var r = t.apply(this); return edb.$accessaware && !n && edb.Object.$onaccess(this, e), r; }; } function t(e, t) { return function(r) { n = !0; var i = this[e]; t.apply(this, arguments), (r = this[e]) !== i && edb.Object.$onchange(this, e, i, r), n = !1; }; } var n = !1; return {approximate: function(n, r, i) { gui.Object.nonmethods(n).forEach(function(o) { var c = Object.getOwnPropertyDescriptor(n, o); c.configurable && Object.defineProperty(r, o, {enumerable: c.enumerable, configurable: c.configurable, get: e(o, function() { return c.get ? c.get.call(this) : i[o] || n[o]; }), set: t(o, function(e) { var t, u; if (c.set)c.set.call(this, e); else if (u = i[o])edb.Type.is(e) ? i[o] = e : (t = u.constructor, i[o] = t.from(e)); else { var s = n[o]; t = r.constructor; var a = t.prototype[o]; switch (a) { case Object:case Array:if (!gui.Type.isNull(e) && !gui.Type.isComplex(e)) throw new TypeError('Expected ' + a); n[o] = e, s !== e && edb.Object.$onchange(r, o, s, e); break; default:n[o] = edb.Type.cast(e); } } })}); }), gui.Object.ownmethods(n).forEach(function(e) { r[e] = n[e]; }); }}; }()), edb.Change = function() {}, edb.Change.prototype = {object: null, type: null}, edb.ObjectChange = function(e, t, n, r, i) { this.object = e, this.name = t, this.type = n, this.oldValue = r, this.newValue = i; }, edb.ObjectChange.prototype = gui.Object.create(edb.Change.prototype, {name: null, oldValue: void 0, newValue: void 0}), edb.ObjectChange.TYPE_UPDATE = 'update', edb.ArrayChange = function(e, t, n, r) { this.type = edb.ArrayChange.TYPE_SPLICE, this.object = e, this.index = t, this.removed = n || [], this.added = r || []; }, edb.ArrayChange.prototype = gui.Object.create(edb.Change.prototype, {index: -1, removed: null, added: null}), edb.ArrayChange.TYPE_SPLICE = 'splice', edb.ArrayChange.toSpliceParams = function(e) { if (e.type === edb.ArrayChange.TYPE_SPLICE) { var t = e.index, n = e.removed.length, r = e.added; return [t, n].concat(r); } throw new TypeError(); }, edb.Output = (function(e) { return gui.Class.create({get: function() { var e = edb.Output.$get(this._type); return e ? e.data : null; }, revoke: e(function() { edb.Output.$revoke(this._type); }), connect: e(function(e) { edb.Input.$connect(this._type, e); }), disconnect: e(function(e) { edb.Input.$disconnect(this._type, e); }), _type: null, $onconstruct: function(e) { this._type = e; }, add: function() { return this.connect.apply(this, arguments); }, remove: function() { return this.disconnect.apply(this, arguments); }}, {}, {$output: e(function(e) { var t = this._makeinput(e.constructor, e); gui.Broadcast.dispatch(edb.BROADCAST_OUTPUT, t); }), $revoke: e(function(e) { var t = edb.Type.is(e) ? e.constructor : e, n = this._makeinput(t, null); gui.Broadcast.dispatch(edb.BROADCAST_OUTPUT, n), delete this._map[t.$classid]; }), $is: function(e) { if (e) { if (this._map) { var t = e.$classid, n = this._map[t]; return n ? !0 : !1; } return !1; } throw new TypeError('No such Type'); }, $get: function(e) { if (e) { if (this._map) { var t = e.$classid, n = this._map[t]; return n ? new edb.Input(n.constructor, n) : null; } return null; } throw new TypeError('No such Type'); }, _map: {}, _makeinput: function(e, t) { var n = e.$classid; return this._map[n] = t, new edb.Input(e, t); }}); }(gui.Combo.chained)), edb.Input = (function(e, t, n, r, i) { var o = new gui.MapList(); return gui.Class.create({type: null, data: null, revoked: !1, onconstruct: function(e, t) { if (!edb.Type.is(t) && t !== null) throw new TypeError(t + ' is not a Type instance'); this.type = e, this.data = t; }}, {}, {IInputHandler: {oninput: function(e) {}, toString: function() { return '[interface InputHandler]'; }}, $connect: e(function(e, t) { e = this.$breakdown(e), n.validate(this.IInputHandler, t) && e.every(this._check) && this._add(e, t); }), $disconnect: e(function(e, t) { return e = this.$breakdown(e), n.validate(this.IInputHandler, t) && e.every(this._check) && this._remove(e, t), e; }), $breakdown: function(e) { return r.isArray(e) ? this._breakarray(e) : this._breakother(e); }, $onoutput: function(e) { var t, n = e.data; n === null || o.each(function(r, o) { t = i.get(r), n instanceof t && o.slice().forEach(function(t) { t.oninput(e); }); }); }, $bestmatch: function(e, t, n) { return this._bestmatch(e.$classid, t.map(function(e) { return e.$classid; }), n); }, $rateall: function(e, t, n, r) { t.forEach(function(t) { r(t, this.$rateone(n ? e : t, n ? t : e)); }, this); }, $rateone: function(e, t) { return this._rateone(e.$classid, t.$classid); }, _breakarray: function(e) { return e.map(function(e) { switch (r.of(e)) { case 'function':return e; case 'string':return gui.Object.lookup(e); case 'object':console.error('Expected function. Got object.'); } }, this); }, _breakother: function(e) { switch (r.of(e)) { case 'function':return [e]; case 'string':return this._breakarray(e.split(' ')); case 'object':console.error('Expected function. Got object.'); } }, _add: function(e, t) { e.filter(function(e) { return o.add(e.$classid, t); }).forEach(function(e) { i.descendantsAndSelf(e, function(n) { if (n.isOutput()) { var r = edb.Output.$get(e); t.oninput(r); } }, this); }, this); }, _remove: function(e, t) { e.forEach(function(e) { o.remove(e.$classid, t); }); }, _check: function(e) { if (!r.isDefined(e)) throw new TypeError('Could not register input for undefined Type'); return !0; }, _bestmatch: t(function(e, t, n) { var r = null, i = Number.MAX_VALUE, o = gui.Class.get(e), c = t.map(function(e) { return gui.Class.get(e); }); return this.$rateall(o, c, n, function(e, t) { t > -1 && i > t && (i = t, r = e); }), r; }), _rateone: t(function(e, t) { var n = gui.Class.get(e), r = gui.Class.get(t), i = 0, o = -1, c = n; if (n === r)o = 0; else for (;c = gui.Class.parent(c);)i++, c === r && (c = null, o = i); return o; }), add: function() { console.error('Deprecated API is deprecated: edb.Input.add()'); }, remove: function() { console.error('Deprecated API is deprecated: edb.Input.remove()'); }, $add: function() { return console.warn('Deprecated API is deprecated: edb.Input.$add(). Use edb.Input.$connect()'), this.$connect.apply(this, arguments); }, $remove: function() { return console.warn('Deprecated API is deprecated: edb.Input.$remove(). Use edb.Input.$disconnect()'), this.$disconnect.apply(this, arguments); }}); }(gui.Combo.chained, gui.Combo.memoized, gui.Interface, gui.Type, gui.Class)), (function() { gui.Broadcast.add(edb.BROADCAST_OUTPUT, {onbroadcast: function(e) { edb.Input.$onoutput(e.data); }}); }()), edb.Crawler = (function() { function e() {} function t(e, i) { gui.Object.each(e, n).forEach(function(e) { r(e, i), t(e, i); }); } function n(e, t) { return edb.Type.is(t) ? t : void 0; } function r(e, t) { t.ontype && t.ontype(e), t.onarray && edb.Array.is(e) && t.onarray(e), t.onobject && edb.Object.is(e) && t.onobject(e); } return e.prototype = {crawl: function(e, n) { if (!edb.Type.is(e)) throw new TypeError(); r(e, n), t(e, n); }}, e; }()), edb.Serializer = (function() { function e() {} function t(e) { return edb.Type.is(e); } function n(e) { return edb.Array.is(e); } function r(e) { return n(e) ? o(e) : i(e); } function i(e) { var t = gui.Object.map(e, c, e); return {$object: gui.Object.extend({$classname: e.$classname, $instanceid: e.$instanceid, $originalid: e.$originalid}, t)}; } function o(e) { return gui.Object.extend(i(e), {$array: u(e)}); } function c(e, i) { var o = e.charAt(0); if (o === '_' || o === '$') return void 0; if (n(this) && e.match(s)) return void 0; if (t(i)) return r(i); if (gui.Type.isComplex(i)) { switch (i.constructor) { case Object:case Array:return i; } return void 0; } if (t(this)) { var c = this.constructor.prototype, u = Object.getOwnPropertyDescriptor(c, e); if (u && (u.set || u.get)) return void 0; } return i; } function u(e) { return Array.map(e, function(e) { return t(e) ? r(e) : e; }); }e.prototype = {serializeToString: function(e, n, i) { if (t(e)) return JSON.stringify(r(e), n, i); throw new TypeError('Expected edb.Object|edb.Array'); }}; var s = /^length|^\d+/; return e; }()), edb.Parser = (function() { function e() {} function t(e, t) { var n, r; if (t === null || (t ? (r = t.$classname || r, n = r ? t : gui.Object.lookup(r)) : (r = e.$object.$classname, n = gui.Object.lookup(r))), e = c(e), t === null) return e; if (n) return n.from(e); var i = new TypeError(r + ' is not defined'); throw r === gui.Class.ANONYMOUS && console.error('TODO: Spiritual should make sure that nothing is ever "' + r + '"\n' + JSON.stringify(e, null, 4)), i; } function n(e) { return gui.Type.isComplex(e) && (e.$array || e.$object); } function r(e) { return gui.Object.map(e.$object, o); } function i(e) { var t = e.$array.map(c); return t.$object = e.$object, t; } function o(e, t) { switch (e) { case '$classname':return void 0; default:return c(t); } } function c(e) { return n(e) ? e.$array ? i(e) : r(e) : e; } return e.prototype = {parseFromString: function(e, r) { try { e = JSON.parse(e); } catch (i) { throw new TypeError('Bad JSON: ' + i.message); } finally { if (n(e)) return t(e, r); throw new TypeError('Expected serialized edb.Object|edb.Array'); } }}, e; }()), edb.InputPlugin = (function(e, t) { return gui.TrackerPlugin.extend({done: !0, onconstruct: function() { gui.TrackerPlugin.prototype.onconstruct.call(this), this._watches = [], this._matches = [], this._needing = []; }, ondestruct: function() { gui.TrackerPlugin.prototype.ondestruct.call(this), this.remove(this._watches); }, connect: e(function(e, n, r) { var i = t.$breakdown(e); i.length && (this.done = this.done && r === !1, i.forEach(function(e) { this._addchecks(e.$classid, [n || this.spirit]), this._watches.push(e), r && this._needing.push(e); }, this), t.$connect(i, this)); }), disconnect: e(function(e, n) { var r = t.$breakdown(e); r.length && (r.forEach(function(e) { this._removechecks(e.$classid, [n || this.spirit]), gui.Array.remove(this._watches, e), gui.Array.remove(this._needing, e); }, this), t.$disconnect(r, this), this.done = this._done()); }), one: function() { console.error('Not supported just yet: ' + this + '.one()'); }, get: function(e) { var n = this._matches.map(function(e) { return e.data.constructor; }), r = t.$bestmatch(e, n, !1), i = r ? this._matches.filter(function(e) { return e.type === r; }).shift() : null; return i ? i.data : null; }, oninput: function(e) { this.$oninput(e); }, match: function(e) { var t = !this._matches.length; return t || this._matches.every(function(t) { return t.$instanceid !== e.$instanceid; }) ? this._maybeinput(e) : !1; }, add: function() { return console.warn('Deprecated API is deprecated: input.add(). Use input.connect()'), this.connect.apply(this, arguments); }, remove: function() { return console.warn('Deprecated API is deprecated: input.remove(). Use input.disconnect()'), this.disconnect.apply(this, arguments); }, $oninput: function(e) { if (e) return e.data === null ? (this._mayberevoke(e), !1) : this.match(e); throw new TypeError('Bad input: ' + e + ' ' + (this.spirit || '')); }, _watches: null, _matches: null, _needing: null, _maybeinput: function(e) { var n = t.$bestmatch(e.type, this._watches, !0); return n ? (this._updatematch(e, n), this.done = this._done(), this._updatehandlers(e), !0) : !1; }, _mayberevoke: function(e) { var n = this._matches, r = this._watches, i = t.$bestmatch(e.type, r, !0); if (i) { var o = n.filter(function(e) { return e.type === i; })[0], c = n.indexOf(o); n.splice(c, 1), this.done = this._done(), this.done || (e.revoked = !0, this._updatehandlers(e)); } }, _updatematch: function(e, n) { var r = this._matches, i = -1, o = -1, c = t.$rateone(e.type, n); r.forEach(function(e, r) { o = t.$rateone(e.type, n), o > -1 && c >= o && (i = r); }), i > -1 ? r[i] = e : r.push(e); }, _updatehandlers: function(e) { gui.Class.ancestorsAndSelf(e.type, function(t) { var n = this._trackedtypes[t.$classid]; n && n.forEach(function(t) { var n = t[0]; n.oninput(e); }); }, this); }, _done: function() { var e = this._needing, t = this._matches; return e.every(function(e) { return t.some(function(t) { return t.data instanceof e; }); }); }, _cleanup: function(e, n) { if (this._removechecks(e, n)) { var r = gui.Class.get(e); t.$remove(r, this); } }}); }(gui.Combo.chained, edb.Input)), gui.module('edb@wunderbyte.com', {plugin: {input: edb.InputPlugin}}); }(self));
// # sourceMappingURL=spiritual-edb.js.map
