<!DOCTYPE html>
<html>
	<head>
		<title>Modal</title>
		<meta name="robots" content="noindex" />
		<script>
			ts.ui.ready(function() {
				// TODO: build this stuff into the APITable!
				var method;
				ts.ui.get('html').action.add('ts-action-safe-link', {
					onaction: function(a) {
						if ((method = ts.ui.ToolBar[a.data])) {
							method.call(ts.ui.ToolBar);
						}
					}
				});
			});
			function spinner() {
				var modal = ts.ui.get('#example4');
				function load(page) {
					modal.spin();
					setTimeout(function throttle() {
						$.get(page, function(html) {
							modal.html(html).stop();
						});
					}, 200);
				}
				modal
					.tabs([
						{
							label: 'Page One',
							onselect: function() {
								load('page1.html');
							}
						},
						{
							label: 'Page Two',
							onselect: function() {
								load('page2.html');
							}
						}
					])
					.open();
			}
		</script>
	</head>

	<body>
		<article id="panel1">
			<h1>Modal</h1>
			<section class="desc">
				<p>
					The fullscreen Modal can be used for stuff that doesn't really work in an
					<a data-ts="Button" href="#components/asides/"><span>Aside</span></a
					>.
				</p>
			</section>
			<section>
				<p>
					The <val>Modal</val> component <em>must</em> be created with a child component
					<val>Panel</val>.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<dialog data-ts="Modal">
							<div data-ts="Panel">
								<p>Modal content.</p>
							</div>
						</dialog>
					</script>
				</figure>
				<p>
					You can create the <val>Modal</val> wherever you like, just make sure that it's positioned
					outside of the <val> Main</val> element when it opens.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<p>Main content.</p>
						<dialog data-ts="Modal" data-ts.title="Example Modal">
							<div data-ts="Panel">
								<p>Modal content.</p>
							</div>
						</dialog>
					</script>
				</figure>
			</section>

			<section>
				<h3>Title and layout</h3>
				<p>
					The <att>data-ts.title</att> attribute configures the Modal title. You can also choose to
					add a <val>Box</val> element to center the content.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<dialog data-ts="Modal" id="example1">
							<div data-ts="Panel">
								<article data-ts="Box">
									<h1>A Modal Example</h1>
									<p>…</p>
									<p>
										<button onclick="ts.ui.get('#example1').close()" class="ts-primary">
											<span>Close the Modal</span>
										</button>
									</p>
								</article>
							</div>
						</dialog>
					</script>
				</figure>
				<p>
					Let's see how that looks. To open the Modal, you can either set the
					<att>data-ts.open</att> attribute to <val> true</val> (using jQuery or something like
					that) or you can use the following API.
				</p>
				<figure data-ts="DoxScript" class="attention">
					<script type="runnable">
						ts.ui.get('#example1').open(); // you can pass an element instead of an ID
					</script>
				</figure>

				<h3>Micro Size</h3>
				<p>
					You can add <att>ts-micro-modal</att> class name to the modal element to have smaller
					modal with extra padding.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<dialog data-ts="Modal" id="exampleMicro" class="ts-micro-modal">
							<div data-ts="Panel">
								<article data-ts="Box">
									<h1>A Micro Modal Example</h1>
									<p>…</p>
									<p>
										<button onclick="ts.ui.get('#exampleMicro').close()" class="ts-primary">
											<span>Close the Modal</span>
										</button>
									</p>
								</article>
							</div>
						</dialog>
					</script>
				</figure>
				<p>
					And here you can try it out to see how it looks:
				</p>
				<figure data-ts="DoxScript" class="attention">
					<script type="runnable">
						ts.ui.get('#exampleMicro').open(); // you can pass an element instead of an ID
					</script>
				</figure>
			</section>

			<section>
				<h3>Modal buttons</h3>
				<p>
					Buttons can be added as part of the content, but some Modals work better when the buttons
					are presented in a fixed footer, for example when there is a lot of content (and
					scrolling). These buttons can be added using the API we know from the
					<a data-ts="Button" href="/#components/footer/">Footer</a>.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.get('#example2', modal => {
							modal.buttons([{
								label: 'Close the Modal',
								type: 'ts-primary',
								onclick: function() {
									modal.close();
								}
							}]).open();
						});
					</script>
				</figure>
				<div data-ts="Note">
					<i class="ts-icon-todo"></i>
					<p>TODO: Enable keyboard focus in the Modal StatusBar.</p>
				</div>
				<section>
					<object data="../bars/topbar.xhtml#buttons-api">
						<replace input="TopBar" output="TabBar" />
					</object>
				</section>
			</section>

			<section>
				<h3>Modal footer</h3>
				<p>
					You can get a footer by following, then you can use the API we know from the
					<a data-ts="Button" href="/#components/footer/">Footer</a>.
				</p>
				<figure data-ts="DoxScript" class="attention">
					<script>
						ts.ui.get('#example2').footer();
					</script>
				</figure>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.get('#example2', modal => {
							modal.buttons([{
								label: 'Clear the footer',
								type: 'ts-primary',
								onclick: function() {
									modal.footer().clear();
								}
							}]).open();
						});
					</script>
				</figure>
			</section>

			<section>
				<h3>Modal header</h3>
				<p>
					You can get a header by following, then you can use the API we know from the
					<a data-ts="Button" href="/#components/header/">Header</a>.
				</p>
				<figure data-ts="DoxScript" class="attention">
					<script>
						ts.ui.get('#example2').header();
					</script>
				</figure>
			</section>

			<section>
				<h3>Modal tabs</h3>
				<p>
					There's two ways to add tabs and one of them is likely to fit your workflow. First, we
					will add some tabs to the example modal using the API we know from the
					<a data-ts="Button" href="/#components/header/">Header</a>.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.get('#example1', modal => {
							modal.tabs([
								{label: 'One'},
								{label: 'Two'},
								{label: 'Three', onselect: function() {
									console.log('Tab three selected!');
								}},
							]).open();
						});
					</script>
				</figure>
				<p>
					The tabs don"t do anything by default, so what happens at <code>onselect</code> is
					completely up to you. If you decice to go with this approach, you should make sure to read
					the section on <a href="#busy-and-done">busy and done</a> further down the page.
				</p>

				<p>
					The alternative approach is to declare multiple <val>Panel</val> inside a containing
					<val>Panels</val> element. They should all have the <att>data-ts.label</att> attribute
					declared. This will generate the tabs automatically as seen in
					<a data-ts="Button" onclick="ts.ui.get('#example3').open()">this example</a>.
				</p>

				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<dialog data-ts="Modal">
							<ul data-ts="Panels">
								<li data-ts="Panel" data-ts.label="Details">
									<div data-ts="Box">…</div>
								</li>
								<li data-ts="Panel" data-ts.label="More Details">
									<div data-ts="Box">…</div>
								</li>
							</li>
						</dialog>
					</script>
				</figure>
				<p>
					Note that even if the tabs are automatically generated via <val>Panel</val> elements, it
					is still possible to manipulate the tabs programatically.
				</p>
				<figure data-ts="DoxScript">
					<script type="text/plain">
						ts.ui.get('#mymodal', modal => {
							var tabs = modal.tabs();
							tabs[0].select();
							tabs.reverse();
						});
					</script>
				</figure>
				<section>
					<object data="../bars/topbar.xhtml#tabs-api">
						<replace input="TopBar" output="TabBar" />
					</object>
				</section>
			</section>
			<section id="busy-and-done">
				<h3>Busy and done</h3>
				<p>
					If you are loading the Modal tabs incrementally (so that the content is not hardcoded
					inside <val>Panels</val> ), you may want to mark the Modal as <code>busy()</code> and
					<code>done()</code> to show a Spinner while loading. Importantly, if you are using
					<val>Box</val> to center the content, this will also instruct the Modal to center the the
					newly loaded content all over again.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.get('#example4', modal => {
							function load(page) {
								modal.busy();
								setTimeout(function throttle() {
									$.get(page, function(html) {
										modal.html(html).done();
									});
								}, 200);
							}
							modal.tabs([
								{label: 'Page One', onselect: function() {
									load('page1.html');
								}},
								{label: 'Page Two',  onselect: function() {
									load('page2.html');
								}},
							]).open();
						});
					</script>
				</figure>
				<p>
					Note that you can also call <code>modal.reflex()</code> to center the <val>Box</val> at
					any point in time.
				</p>
			</section>

			<section>
				<h3>Tracking the state</h3>
				<p>
					You can implement the methods <code>onopen</code>, <code>onopened</code>,
					<code>onclose</code> and
					<code>onclosed</code>
					to do something whenever the Modal changes state.

					<figure data-ts="DoxScript">
						<script>
							ts.ui.get(myelement, modal => {
								Object.assign(modal, {
									onopen: () => console.log('Will open'),
									onopened: () => console.log('Did open'),
									onclose: () => console.log('Will close'),
									onclosed: () => console.log('Did close')
								});
							});
						</script>
					</figure>
				</p>

				<p>
					If you return <code>false</code> in methods <code>onopen</code> and <code>onclose</code>,
					the Modal will respect that. You can also setup inline callbacks to be invoked when the
					Modal changes state.
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<dialog data-ts="Modal"
							data-ts.onopen="console.log('Will open')"
							data-ts.onopened="console.log('Did open')"
							data-ts.onclose="console.log('Will close')"
							data-ts.onclosed="console.log('Did close')">
							<div data-ts="Panel">
								<p>Modal content.</p>
							</div>
						</dialog>
					</script>
				</figure>
				<p>Finally, you can also track the state with some custom DOM events if you like.</p>
				<figure data-ts="DoxScript">
					<script>
						function debug(e) {
							console.log(e.type, e.target);
						}
						document.addEventListener('ts-open', debug);
						document.addEventListener('ts-opened', debug);
						document.addEventListener('ts-close', debug);
						document.addEventListener('ts-closed', debug);
					</script>
				</figure>
				<p>
					The events <code>ts-open</code> and <code>ts-close</code> can be blocked with
					<code>e.preventDefault()</code> to prevent the Modal from changing state.
				</p>
			</section>

			<section>
				<p>Here's finally an overview of the Modal API.</p>
				<div data-ts="DoxApi">
					<script type="application/json">
						{
							"name": "ts.ui.ModalSpirit",
							"methods": [
								{
									"name": "tabs",
									"args": "(array)",
									"desc": "Get or set the tabs."
								},
								{
									"name": "buttons",
									"args": "(array)",
									"desc": "Get or set the buttons."
								},
								{
									"name": "title",
									"args": "(array)",
									"desc": "Get or set the title."
								},
								{
									"name": "open",
									"desc": "Open the Modal."
								},
								{
									"name": "close",
									"desc": "Close the Modal."
								},
								{
									"name": "busy",
									"desc": "Hide the content (while loading new content)."
								},
								{
									"name": "done",
									"desc": "Show the content."
								},
								{
									"name": "status",
									"args": "string",
									"desc": "Show a message in the StatusBar."
								},
								{
									"name": "pager",
									"args": "object",
									"desc": "Get or set the [Pager](/#components/pager/) in the StatusBar."
								},
								{
									"name": "reflex",
									"desc": "Run JS based layout, usually to center the `Main` vertically."
								},
								{
									"name": "onopen",
									"desc": "Called when the Modal is about to open"
								},
								{
									"name": "onopened",
									"desc": "Called when the Modal is fully opened (animation done)"
								},
								{
									"name": "onclose",
									"desc": "Called when the Modal is about to closed"
								},
								{
									"name": "onclosed",
									"desc": "Called when the Modal is fully closed (animation done)"
								}
							]
						}
					</script>
				</div>
			</section>
		</article>

		<!-- Modals ............................................................. -->

		<dialog data-ts="Modal" id="example1" data-ts.title="Example Modal">
			<div data-ts="Panel">
				<div data-ts="Box">
					<h1>A Modal Example</h1>
					<p>
						Modal ipsum dolor amet jerky sausage pork belly tenderloin burgdoggen kevin prosciutto
						beef ribs shoulder tri-tip salami ribeye turducken rump. Rump prosciutto ham, kevin
						picanha drumstick chuck pork chop. Short ribs tail shank, alcatra kevin spare ribs
						meatloaf beef. Pork loin salami flank andouille prosciutto chuck bresaola sirloin
						ribeye. Bacon picanha salami filet mignon capicola beef ribs. Venison jowl meatloaf
						jerky porchetta, brisket shank picanha.
					</p>
					<p>
						<button onclick="ts.ui.get('#example1').close()" data-ts="Button" class="ts-primary">
							<span>Close the Modal</span>
						</button>
					</p>
				</div>
			</div>
		</dialog>

		<dialog data-ts="Modal" id="example2" data-ts.title="Example Modal">
			<div data-ts="Panel">
				<div data-ts="Box">
					<h1>Modal with fixed footer</h1>
					<p>
						Bacon ipsum dolor amet jerky sausage pork belly tenderloin burgdoggen kevin prosciutto
						beef ribs shoulder tri-tip salami ribeye turducken rump. Rump prosciutto ham, kevin
						picanha drumstick chuck pork chop. Short ribs tail shank, alcatra kevin spare ribs
						meatloaf beef. Pork loin salami flank andouille prosciutto chuck bresaola sirloin
						ribeye. Bacon picanha salami filet mignon capicola beef ribs. Venison jowl meatloaf
						jerky porchetta, brisket shank picanha drumstick capicola frankfurter.
					</p>
				</div>
			</div>
		</dialog>

		<dialog data-ts="Modal" id="example3" data-ts.title="Example Tabs">
			<ul data-ts="Panels">
				<li data-ts="Panel" data-ts.label="Details">
					<div data-ts="Box">
						<h1>Modal with fixed footer</h1>
						<p>
							Bacon ipsum dolor amet jerky sausage pork belly tenderloin burgdoggen kevin prosciutto
							beef ribs shoulder tri-tip salami ribeye turducken rump. Rump prosciutto ham, kevin
							picanha drumstick chuck pork chop. Short ribs tail shank, alcatra kevin spare ribs
							meatloaf beef. Pork loin salami flank andouille prosciutto chuck bresaola sirloin
							ribeye. Bacon picanha salami filet mignon capicola beef ribs. Venison jowl meatloaf
							jerky porchetta, brisket shank picanha drumstick capicola frankfurter.
						</p>
					</div>
				</li>
				<li data-ts="Panel" data-ts.label="More Details">
					<div data-ts="Box">
						<h1>More details</h1>
						<form data-ts="Form">
							<fieldset>
								<label>
									<span>Age</span>
									<input type="number" />
								</label>
							</fieldset>
							<fieldset>
								<label>
									<span>Occupation</span>
									<select>
										<option value="a" selected>Developer</option>
										<option value="b">Designer</option>
										<option value="c">Manager</option>
									</select>
								</label>
							</fieldset>
						</form>
					</div>
				</li>
			</ul>
		</dialog>

		<dialog data-ts="Modal" id="example4" data-ts.title="Busy Modal">
			<div data-ts="Panel">
				<div data-ts="Box"></div>
			</div>
		</dialog>

		<dialog data-ts="Modal" id="exampleMicro" class="ts-micro-modal" data-ts.title="Example Modal">
			<div data-ts="Panel">
				<div data-ts="Box">
					<h1>A Micro Modal Example</h1>
					<p>
						Micro Modal ipsum dolor amet jerky sausage pork belly tenderloin burgdoggen kevin
						prosciutto beef ribs shoulder tri-tip salami ribeye turducken rump. Rump prosciutto ham,
						kevin picanha drumstick chuck pork chop. Short ribs tail shank, alcatra kevin spare ribs
						meatloaf beef. Pork loin salami flank andouille prosciutto chuck bresaola sirloin
						ribeye. Bacon picanha salami filet mignon capicola beef ribs. Venison jowl meatloaf
						jerky porchetta, brisket shank picanha.
					</p>
					<p>
						<button
							onclick="ts.ui.get('#exampleMicro').close()"
							data-ts="Button"
							class="ts-primary"
						>
							<span>Close the Modal</span>
						</button>
					</p>
				</div>
			</div>
		</dialog>
	</body>
</html>
