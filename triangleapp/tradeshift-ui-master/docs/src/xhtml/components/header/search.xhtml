<!DOCTYPE html>
<html>
	<head>
		<title>Header Search</title>
		<object data="_tabs.xhtml"></object>
	</head>
	<body>
		<article>
			<section>
				<p>
					The <code>search</code> method reveals a dedicated search bar. The
					<code>info</code> property acts as placeholder and the <code>onsearch</code> method gets
					called whenever the user presses <code>ENTER</code>.
				</p>
				<figure data-ts="DoxScript" class="attention">
					<script type="runnable">
						ts.ui.Header.search({
							info: 'Search amongst all the things',
							onsearch: function(value) {
								ts.ui.Notification.success(value || '(nothing)');
							}
						});
					</script>
				</figure>
				<p>
					If defined, the <code>onidle</code> method gets called whenever the user pauses typing.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						var search = ts.ui.Header.search();
						search.value = 'Try it now!';
						search.onidle = function(value) {
							ts.ui.Notification.success(value);
						};
					</script>
				</figure>
				<p>
					The <code>onidle</code> method will also be called when the field loses focus. The
					<code>idletime</code> property controls the timeout value, default is
					<code>500</code> (milliseconds). You can also add one or more buttons to the Search.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						var search = ts.ui.Header.search();
						search.buttons.push({
							label: 'Search Now!',
							onclick: function() {
								search.search();
							}
						});
					</script>
				</figure>
				<p>
					The buttons have a <code>search</code> property that references the Search model. This
					will come in handy when you configure the Search via a single JSON payload.
				</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.Header.search({
							info: 'Search amongst all the things',
							buttons: [{
								label: 'Advanced Search',
								onclick: function() {
									console.log('Loading advanced search...');
									this.search.hide();
								}
							}]
						});
					</script>
				</figure>
			</section>

			<p>
				If you are using
				<a data-ts="Button" href="/#components/header/tabs.html">tabs</a>, remember that the Search
				is conceptually scoped to the current tab. You would most often want to clear the entire
				Search whenever the user switches tab. This event can be tracked with the tabs
				<code>onselect</code> callback.
			</p>

			<figure data-ts="DoxScript">
				<script type="runnable">
					ts.ui.Header.search(null);
				</script>
			</figure>

			<!--

				<code>hide</code> or <code>clear</code> the Search whenever the user switches tab. If you need to clear the buttons as well, there's also a way to do that.</p>

			<figure data-ts="DoxScript">
					<script type="text/plain">
						ts.ui.Header.search().buttons.clear();
					</script>
				</figure>

			-->
			<!--
			<section>
				<h3>Search info</h3>
				<p>The <code>info</code> property doubles as both the <code>placeholder</code> when the field is expanded and the <code>title</code> (or tooltip) when the field is collapsed.</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						var search = ts.ui.Header.search();
						search.info = 'Search amongst the things';
						search.value = ''; // collapse the field
					</script>
				</figure>
			</section>

			
			<section>
				<h3>Search flex</h3>
				<p>You can <code>flex</code> the search field to make it stretch the available width of the ToolBar. In that case, it will remain expanded even when there's no default <code>value</code>.</p>
				<figure data-ts="DoxScript">
					<script type="runnable">
						ts.ui.Header.search({
							tip: 'Flex all the way!',
							flex: 1
						}).buttons([
							{ label: 'No Flex', type: 'ts-primary' }
						]);
					</script>
				</figure>
				<p>You can also assign <code>flex</code> to buttons, although that has little practical value. In the future, we may provide a more advanced distribution scheme. That's why we use a number instead of a boolean, but you should always use <samp>1</samp> for now.</p>
			</section>
			-->

			<section id="search-api" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
				<p>Here' an overview of the Search model.</p>
				<div data-ts="DoxApi">
					<script type="application/json">
						{
							"name": "ts.ui.SearchModel",
							"properties": [
								{
									"name": "value",
									"type": "string",
									"desc": "The search field value."
								},
								{
									"name": "idletime",
									"type": "number",
									"desc": "Time before the user is considered idle."
								},
								{
									"name": "info",
									"type": "string",
									"desc": "The placeholder and/or mouseover tooltip."
								}
							],
							"methods": [
								{
									"name": "onsearch",
									"desc": "Called when pressing ENTER or `search` is called."
								},
								{
									"name": "onidle",
									"desc": "Called when the user pauses typing."
								},
								{
									"name": "search",
									"desc": "Execute the search based on current value."
								},
								{
									"name": "clear",
									"desc": "Clear the value AND execute `onsearch` (or `onidle`)."
								},
								{
									"name": "onfocus",
									"desc": "Called when the search field is focused."
								},
								{
									"name": "onblur",
									"desc": "Called when the search field gets blurred."
								},
								{
									"name": "focus",
									"desc": "Focus the search field."
								},
								{
									"name": "blur",
									"desc": "Blur the search field."
								},
								{
									"name": "hide",
									"desc": "Hide the search field."
								},
								{
									"name": "show",
									"desc": "Show the search field."
								}
							]
						}
					</script>
				</div>
			</section>

			<!--
				,
							buttons: [
								{
									label: "Let's Search",
									icon: 'ts-icon-search',
									onclick: function() {
										this.search.search();
									}
								}
							]
						-->
		</article>
	</body>
	<html></html>
</html>
